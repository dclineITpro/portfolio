{"version":3,"mappings":"kFAMA,MAAMA,EAAMC,EAAiB,MAAO,CAClC,CACE,OACA,CAAE,MAAO,KAAM,OAAQ,KAAM,EAAG,IAAK,EAAG,KAAM,GAAI,IAAK,IAAK,QAAU,CACvE,EACD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,IAAK,EAAG,IAAK,IAAK,SAAU,EACvD,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,EACxC,CAAC,OAAQ,CAAE,GAAI,IAAK,GAAI,IAAK,GAAI,KAAM,GAAI,KAAM,IAAK,QAAQ,CAAE,EAChE,CAAC,OAAQ,CAAE,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,IAAK,QAAQ,CAAE,CACpE,CAAC,ECTKC,EAAWD,EAAiB,WAAY,CAC5C,CACE,OACA,CACE,EAAG,wjBACH,IAAK,QACN,CACF,EACD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,KAAM,EAAG,IAAK,IAAK,SAAU,CAC1D,CAAC,ECTKE,EAASF,EAAiB,SAAU,CACxC,CAAC,OAAQ,CAAE,EAAG,4CAA6C,IAAK,QAAQ,CAAE,EAC1E,CAAC,WAAY,CAAE,OAAQ,gBAAiB,IAAK,QAAQ,CAAE,EACvD,CAAC,OAAQ,CAAE,GAAI,KAAM,GAAI,KAAM,GAAI,IAAK,GAAI,KAAM,IAAK,QAAQ,CAAE,CACnE,CAAC,ECRM,SAASG,EAAaC,EAAmC,CAC9D,GAAI,OAAO,aAAiB,IAAoB,YAChD,MAAMC,EAAgC,CACpC,OAAQ,iBACR,KAAM,eACN,WAAY,sBAEd,OAAO,aAAa,QAAQA,EAAID,CAAQ,CAAC,CAC3C,CAEA,eAAsBE,EAAmBC,EAMvB,iBAChB,KAAM,CAAE,SAAAH,EAAU,OAAAI,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,QAAAC,CAAY,EAAAJ,EACtD,GAAI,CAACC,EAAc,UAAI,MAAM,wCAAwC,EAErE,GAAIJ,IAAa,SAAU,CAEnB,MAAAQ,EAAO,MAAMC,EAAa,CAAE,SAAAT,EAAU,OAAAI,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,EACpEC,EAAQC,CAAI,EACZ,MACF,CAEM,MAAAE,EAAWV,IAAa,OAC1B,kDACA,gDAEEW,EAAO,CACX,MAAOX,IAAa,OAAS,uBAAyB,mCACtD,SAAU,CACR,GAAIM,EAAS,CAAC,CAAE,KAAM,SAAU,QAASA,CAAQ,GAAI,CAAC,EACtD,CAAE,KAAM,OAAQ,QAASD,CAAO,CAClC,EACA,YAAa,GACb,WAAY,IACZ,OAAQ,IAGJO,EAAM,MAAM,MAAMF,EAAU,CAChC,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAUN,CAAM,EACnC,EACA,KAAM,KAAK,UAAUO,CAAI,EAC1B,EACD,GAAI,CAACC,EAAI,IAAM,CAACA,EAAI,KAAY,UAAI,MAAM,GAAGZ,CAAQ,kBAAkBY,EAAI,MAAM,IAAIA,EAAI,UAAU,EAAE,EAE/F,MAAAC,EAASD,EAAI,KAAK,UAAU,EAC5BE,EAAU,IAAI,YAAY,OAAO,EACvC,IAAIC,EAAS,GACb,OAAa,CACX,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAA,EAAU,MAAMJ,EAAO,KAAK,EACtC,GAAAG,EAAM,MACVD,GAAUD,EAAQ,OAAOG,EAAO,CAAE,OAAQ,GAAM,EAC1C,MAAAC,EAAQH,EAAO,MAAM;AAAA,CAAI,EACtBA,EAAAG,EAAM,IAAS,MACxB,UAAWC,KAAQD,EAAO,CAClB,MAAAE,EAAUD,EAAK,OACrB,GAAI,CAACC,GAAW,CAACA,EAAQ,WAAW,OAAO,EAAG,SAC9C,MAAMC,EAAUD,EAAQ,MAAM,CAAC,EAAE,KAAK,EACtC,GAAIC,IAAY,SAAU,OACtB,IACI,MAAAC,EAAO,KAAK,MAAMD,CAAO,EACzBE,IAAQC,GAAAC,GAAAC,EAAAJ,GAAA,YAAAA,EAAM,UAAN,YAAAI,EAAgB,KAAhB,YAAAD,EAAoB,QAApB,YAAAD,EAA2B,YAAWG,GAAAC,GAAAC,EAAAP,GAAA,YAAAA,EAAM,UAAN,YAAAO,EAAgB,KAAhB,YAAAD,EAAoB,UAApB,YAAAD,EAA6B,UAAW,GACxFJ,GAAOhB,EAAQgB,CAAe,OACxB,CAEZ,CACF,CACF,CACF,CAEgB,SAAAO,EAAa9B,EAAoB+B,EAAa,CAC5D,GAAI,OAAO,aAAiB,IAAa,OACzC,MAAM9B,EAAgC,CACpC,OAAQ,iBACR,KAAM,eACN,WAAY,sBAEd,aAAa,QAAQA,EAAID,CAAQ,EAAG+B,EAAI,MAAM,CAChD,CAEO,SAASC,GAAqC,CACnD,GAAI,OAAO,aAAiB,IAAoB,YAC1C,MAAAC,EAAI,aAAa,QAAQ,aAAa,EAC5C,OAAIA,IAAM,UAAYA,IAAM,QAAUA,IAAM,aAAqBA,EAC1D,IACT,CAEO,SAASC,EAAkBlC,EAAoB,CAChD,OAAO,aAAiB,KACf,qBAAQ,cAAeA,CAAQ,CAC9C,CAEA,eAAsBS,EAAaN,EAKf,2BAClB,KAAM,CAAE,SAAAH,EAAU,OAAAI,EAAQ,OAAAC,EAAQ,OAAAC,GAAWH,EAE7C,GAAI,CAACC,EAAc,UAAI,MAAM,wCAAwC,EAErE,GAAIJ,IAAa,SAAU,CAEnB,MAAAU,EAAW,gGAAkG,mBAAmBN,CAAM,EACtIO,EAAO,CACX,SAAU,CACR,CACE,KAAM,OACN,MAAO,CAAC,CAAE,MAAOL,EAAS,WAAWA,CAAM;AAAA;AAAA,EAAS,IAAMD,EAAQ,CACpE,CACF,EACA,iBAAkB,CAAE,YAAa,GAAK,gBAAiB,GAAI,GAGvDO,EAAM,MAAM,MAAMF,EAAU,CAChC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,UAAUC,CAAI,EAC1B,EACD,GAAI,CAACC,EAAI,GAAU,UAAI,MAAM,iBAAiBA,EAAI,MAAM,IAAIA,EAAI,UAAU,EAAE,EACtE,MAAAuB,EAAO,MAAMvB,EAAI,OACjBwB,GAAOR,GAAAC,GAAAL,GAAAC,GAAAC,EAAAS,GAAA,YAAAA,EAAM,aAAN,YAAAT,EAAmB,KAAnB,YAAAD,EAAuB,UAAvB,YAAAD,EAAgC,QAAhC,YAAAK,EAAwC,KAAxC,YAAAD,EAA4C,KACzD,GAAI,CAACQ,EAAY,UAAI,MAAM,4BAA4B,EAChD,OAAAA,CACT,CAEA,GAAIpC,IAAa,OAAQ,CACvB,MAAMU,EAAW,kDACXC,EAAO,CACX,MAAO,uBACP,SAAU,CACR,GAAIL,EAAS,CAAC,CAAE,KAAM,SAAU,QAASA,CAAQ,GAAI,CAAC,EACtD,CAAE,KAAM,OAAQ,QAASD,CAAO,CAClC,EACA,YAAa,GACb,WAAY,KAERO,EAAM,MAAM,MAAMF,EAAU,CAChC,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAUN,CAAM,EACnC,EACA,KAAM,KAAK,UAAUO,CAAI,EAC1B,EACD,GAAI,CAACC,EAAI,GAAU,UAAI,MAAM,eAAeA,EAAI,MAAM,IAAIA,EAAI,UAAU,EAAE,EACpE,MAAAuB,EAAO,MAAMvB,EAAI,OACjBwB,GAAOC,GAAAC,GAAAX,EAAAQ,GAAA,YAAAA,EAAM,UAAN,YAAAR,EAAgB,KAAhB,YAAAW,EAAoB,UAApB,YAAAD,EAA6B,QAC1C,GAAI,CAACD,EAAY,UAAI,MAAM,0BAA0B,EAC9C,OAAAA,CACT,CAEA,GAAIpC,IAAa,aAAc,CAC7B,MAAMU,EAAW,gDACXC,EAAO,CACX,MAAO,mCACP,SAAU,CACR,GAAIL,EAAS,CAAC,CAAE,KAAM,SAAU,QAASA,CAAQ,GAAI,CAAC,EACtD,CAAE,KAAM,OAAQ,QAASD,CAAO,CAClC,EACA,YAAa,GACb,WAAY,KAERO,EAAM,MAAM,MAAMF,EAAU,CAChC,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAUN,CAAM,EAInC,EACA,KAAM,KAAK,UAAUO,CAAI,EAC1B,EACD,GAAI,CAACC,EAAI,GAAU,UAAI,MAAM,qBAAqBA,EAAI,MAAM,IAAIA,EAAI,UAAU,EAAE,EAC1E,MAAAuB,EAAO,MAAMvB,EAAI,OACjBwB,GAAOG,GAAAC,GAAAC,EAAAN,GAAA,YAAAA,EAAM,UAAN,YAAAM,EAAgB,KAAhB,YAAAD,EAAoB,UAApB,YAAAD,EAA6B,QAC1C,GAAI,CAACH,EAAY,UAAI,MAAM,gCAAgC,EACpD,OAAAA,CACT,CAEM,UAAI,MAAM,sBAAsB,CACxC,CCtLA,MAAMM,EAAwB,CAAC,SAAU,OAAQ,YAAY,EAEvDC,EAAkC,CACtC,OAAQ,4BACR,KAAM,uBACN,WAAY,0BACd,EAEMC,EAA8C,CAAC,CAAE,KAAAC,EAAM,QAAAC,EAAS,QAAAC,KAAc,CAClF,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAmC,UAAE,OAAQ,GAAI,KAAM,GAAI,WAAY,EAAI,GAC7F,CAACC,EAAiBC,CAAkB,EAAIF,WAAmB,QAAQ,EAEzEG,YAAU,IAAM,CACd,GAAI,CAACR,EAAM,OACX,MAAMS,EAA8B,CAClC,OAAQvD,EAAa,QAAQ,GAAK,GAClC,KAAMA,EAAa,MAAM,GAAK,GAC9B,WAAYA,EAAa,YAAY,GAAK,IAE5CkD,EAAQK,CAAC,EACUF,EAAApB,KAAuB,QAAQ,GACjD,CAACa,CAAI,CAAC,EAET,MAAMU,EAAO,IAAM,CACPb,EAAA,QAAST,GAAMH,EAAaG,EAAGe,EAAKf,CAAC,CAAC,CAAC,EACjDC,EAAkBiB,CAAe,EACvBJ,GAAA,MAAAA,IACFD,GAAA,EAGV,OAAKD,EAGHW,EAAA,KAAC,MAAI,WAAU,0DACb,UAAAC,EAAA,IAAC,MAAI,WAAU,+BAA+B,QAASX,EAAS,EAChEU,OAAC,MAAI,WAAU,0FACb,UAACA,OAAA,OAAI,UAAU,kEACb,UAACC,EAAA,UAAG,UAAU,2BAA2B,SAAW,gBACpDA,MAAC,SAAO,SAASX,EAAS,UAAU,kCAClC,SAACW,MAAAC,EAAA,CAAE,KAAM,GAAI,CACf,IACF,EACAF,OAAC,MAAI,WAAU,gBACb,UAAAA,OAAC,MACC,WAACC,EAAA,aAAM,UAAU,oCAAoC,SAAgB,qBACrEA,EAAA,IAAC,UACC,UAAU,kFACV,MAAON,EACP,SAAWQ,GAAMP,EAAmBO,EAAE,OAAO,KAAiB,EAE7D,SAAUjB,EAAA,IAAKT,GACbwB,MAAA,UAAe,MAAOxB,EAAI,SAAMU,EAAAV,CAAC,CAArB,EAAAA,CAAuB,CACrC,EACH,GACF,EACCS,EAAU,IAAKT,UACb,MACC,WAACuB,OAAA,SAAM,UAAU,oCAAqC,UAAAb,EAAMV,CAAC,EAAE,YAAQ,EACvEwB,EAAA,IAAC,SACC,KAAK,WACL,UAAU,kFACV,YAAa,SAASxB,CAAC,4BACvB,MAAOe,EAAKf,CAAC,EACb,SAAW0B,GAAMV,EAASW,IAAU,CAAE,GAAGA,EAAM,CAAC3B,CAAC,EAAG0B,EAAE,OAAO,KAAQ,IACvE,IARQ1B,CASV,CACD,EACAwB,EAAA,WAAI,UAAU,yBAAyB,SAExC,+HACF,EACAD,OAAC,MAAI,WAAU,uDACb,UAAAC,MAAC,SAAO,WAAU,2EAA2E,QAASX,EAAS,SAAM,iBACpH,SAAO,WAAU,sEAAsE,QAASS,EAAM,SAAI,UAC7G,GACF,CACF,IA9CgB,IAgDpB,ECjBA,IAAIM,EAAuC,KAC3C,eAAeC,GAAc,CAC3B,OAAKD,IACHA,GAAmB,SAAY,CAK7B,MAAME,GADM,YAAM,OAAO,qCAAqC,OAChC,SAEvB,OADW,MAAMA,EAAS,qBAAsB,yBAAyB,CACzE,MAGJF,CACT,CAEA,eAAsBG,EAAmBC,EAAiB,CAClD,MAAAC,EAAY,MAAMJ,IAElBK,EAAU,GAChB,UAAWC,KAAKH,EAAQ,CAChB,MAAAI,EAAS,MAAMH,EAAUE,EAAE,KAAM,CAAE,QAAS,OAAQ,UAAW,GAAM,EACrEjC,EAAO,MAAM,KAAKkC,EAAO,IAAoB,EACnDF,EAAQ,KAAKhC,CAAI,CACnB,CAEA,SAASmC,EAAMlC,EAAc,CAC3B,OAAO8B,EAAU9B,EAAM,CAAE,QAAS,OAAQ,UAAW,EAAM,GAAE,KAAMmC,GAAa,MAAM,KAAKA,EAAI,IAAoB,CAAa,CAClI,CAES,SAAAC,EAAUC,EAAaC,EAAa,CAC3C,IAAIC,EAAM,EACNC,EAAK,EACLC,EAAK,EACT,MAAMC,EAAM,KAAK,IAAIL,EAAE,OAAQC,EAAE,MAAM,EACvC,QAASK,EAAI,EAAGA,EAAID,EAAKC,IACvBJ,GAAOF,EAAEM,CAAC,EAAIL,EAAEK,CAAC,EACjBH,GAAMH,EAAEM,CAAC,EAAIN,EAAEM,CAAC,EAChBF,GAAMH,EAAEK,CAAC,EAAIL,EAAEK,CAAC,EAElB,MAAMC,EAAQ,KAAK,KAAKJ,CAAE,EAAI,KAAK,KAAKC,CAAE,EACnC,OAAAG,EAAQL,EAAMK,EAAQ,CAC/B,CAEe,eAAAC,EAAKC,EAAe5B,EAAI,EAAG,CAClC,MAAA6B,EAAI,MAAMb,EAAMY,CAAK,EACrBE,EAASjB,EAAQ,IAAI,CAACkB,EAAGN,KAAO,CAAE,EAAAA,EAAG,MAAOP,EAAUW,EAAGE,CAAC,GAAI,EACpE,OAAAD,EAAO,KAAK,CAACX,EAAGC,IAAMA,EAAE,MAAQD,EAAE,KAAK,EAChCW,EAAO,MAAM,EAAG9B,CAAC,EAAE,IAAI,CAAC,CAAE,EAAAyB,EAAG,MAAAO,MAAa,CAAE,MAAOrB,EAAOc,CAAC,EAAG,MAAAO,CAAQ,GAC/E,CAEA,MAAO,CAAE,KAAAL,CAAK,CAChB,CClHA,IAAIM,EAA8B,KAClC,SAASC,GAAoB,CAC3B,OAAKD,IAEYA,EAAA,IAAI,OAAO,gEAAoD,CAAE,KAAM,QAAU,IAE3FA,CACT,CAEA,SAASE,IAAS,CAChB,OAAO,KAAK,SAAS,SAAS,EAAE,EAAE,MAAM,CAAC,CAC3C,CAEA,eAAeC,EAAoBC,EAAUC,EAA6B,CACxE,MAAMC,EAASL,IACTM,EAAQH,EAAI,OAASF,GAAO,EAClC,OAAO,IAAI,QAAW,CAACM,EAASC,IAAW,CACnC,MAAAC,EAAU,WAAW,IAAM,CACxBJ,EAAA,oBAAoB,UAAWK,CAAY,EAC3CF,EAAA,IAAI,MAAM,gBAAgB,CAAC,GACjC,GAAI,EACP,SAASE,EAAMvC,EAAsB,CACnC,MAAMxB,EAAOwB,EAAE,KACf,GAAI,GAACxB,GAASA,EAAK,OAASyD,GAAWzD,EAAK,OAAS,SACjD,IAAAA,EAAK,OAAS,UAAY,CAACA,EAAK,OAASA,EAAK,QAAU2D,GAAQ,CAClE,aAAaG,CAAO,EACbJ,EAAA,oBAAoB,UAAWK,CAAY,EAClDF,EAAO,IAAI,MAAM7D,EAAK,SAAW,cAAc,CAAC,EAChD,MACF,EACIA,EAAK,QAAU2D,GAASF,IAAY,iBACtC,aAAaK,CAAO,EACbJ,EAAA,oBAAoB,UAAWK,CAAY,EAClDH,EAAQ5D,CAAS,GAErB,CACO0D,EAAA,iBAAiB,UAAWK,CAAY,EAC/CL,EAAO,YAAY,CAAE,GAAGF,EAAK,MAAAG,CAAO,GACrC,CACH,CAQA,SAASK,EAAS/D,EAAwB,CACjC,OAAAA,EACJ,cACA,QAAQ,eAAgB,GAAG,EAC3B,MAAM,KAAK,EACX,OAAO,OAAO,CACnB,CAEA,SAASgE,GAAgBnC,EAAiB,CAClC,MAAAoC,EAAOpC,EAAO,IAAKG,GAAM+B,EAAS/B,EAAE,IAAI,CAAC,EACzCkC,MAAS,IACf,UAAWC,KAAUF,EACN,IAAI,IAAIE,CAAM,EACtB,QAASC,GAAMF,EAAG,IAAIE,GAAIF,EAAG,IAAIE,CAAC,GAAK,GAAK,CAAC,CAAC,EAE/C,MAAAC,EAAIJ,EAAK,QAAU,EACnBK,MAAU,IAChBJ,EAAG,QAAQ,CAACK,EAAGC,IAASF,EAAI,IAAIE,EAAM,KAAK,KAAKH,EAAI,IAAME,EAAI,EAAE,EAAI,CAAC,CAAC,EAEtE,MAAME,EAAUR,EAAK,IAAKE,GAAW,CAC7B,MAAAO,MAAS,IACf,UAAWN,KAAKD,EAAQO,EAAG,IAAIN,GAAIM,EAAG,IAAIN,CAAC,GAAK,GAAK,CAAC,EAChD,MAAAO,MAAU,IACb,OAAAD,EAAA,QAAQ,CAACE,EAAOJ,IAAS,CAC1B,MAAMK,EAAUD,EAAQT,EAAO,QAAWG,EAAI,IAAIE,CAAI,GAAK,GACvDG,EAAA,IAAIH,EAAMK,CAAM,EACrB,EACMF,CAAA,CACR,EAED,SAASG,EAAU9E,EAAc,CACzB,MAAAmE,EAASJ,EAAS/D,CAAI,EACtB0E,MAAS,IACf,UAAW,KAAKP,EAAQO,EAAG,IAAI,GAAIA,EAAG,IAAI,CAAC,GAAK,GAAK,CAAC,EAChD,MAAAC,MAAU,IACb,OAAAD,EAAA,QAAQ,CAACE,EAAOJ,IAAS,CAC1B,MAAMK,EAAUD,EAAQT,EAAO,QAAWG,EAAI,IAAIE,CAAI,GAAK,GACvDG,EAAA,IAAIH,EAAMK,CAAM,EACrB,EACMF,CACT,CAES,SAAAvC,EAAUC,EAAwBC,EAAwB,CACjE,IAAIC,EAAM,EACNC,EAAK,EACLC,EAAK,EACPJ,EAAA,QAAQ,CAAC0C,EAAIX,IAAM,CACnB5B,GAAMuC,EAAKA,EACX,MAAMC,EAAK1C,EAAE,IAAI8B,CAAC,GAAK,EACvB7B,GAAOwC,EAAKC,CAAA,CACb,EACD1C,EAAE,QAAS0C,GAAQvC,GAAMuC,EAAKA,CAAG,EACjC,MAAMpC,EAAQ,KAAK,KAAKJ,CAAE,EAAI,KAAK,KAAKC,CAAE,EACnC,OAAAG,EAAQL,EAAMK,EAAQ,CAC/B,CAES,SAAAC,EAAKC,EAAe5B,EAAI,EAAG,CAC5B,MAAA6B,EAAI+B,EAAUhC,CAAK,EACnBE,EAASyB,EAAQ,IAAI,CAACQ,EAAItC,KAAO,CAAE,EAAAA,EAAG,MAAOP,EAAUW,EAAGkC,CAAE,GAAI,EACtE,OAAAjC,EAAO,KAAK,CAACX,EAAGC,IAAMA,EAAE,MAAQD,EAAE,KAAK,EAChCW,EAAO,MAAM,EAAG9B,CAAC,EAAE,IAAI,CAAC,CAAE,EAAAyB,EAAG,MAAAO,MAAa,CAAE,MAAOrB,EAAOc,CAAC,EAAG,MAAAO,CAAQ,GAC/E,CAEA,MAAO,CAAE,KAAAL,CAAK,CAChB,CAEA,SAASqC,IAAkC,CACzC,MAAMC,EAAW,CACf,CAAE,GAAI,SAAU,KAAM,OAAQ,EAC9B,CAAE,GAAI,cAAe,KAAM,YAAa,EACxC,CAAE,GAAI,UAAW,KAAM,QAAS,EAChC,CAAE,GAAI,cAAe,KAAM,YAAa,EACxC,CAAE,GAAI,kBAAmB,KAAM,gBAAiB,EAChD,CAAE,GAAI,iBAAkB,KAAM,eAAgB,EAC9C,CAAE,GAAI,gBAAiB,KAAM,cAAe,GAExCtD,EAAkB,GACf,OAAAsD,EAAA,QAASC,GAAM,CACtB,MAAMC,EAAK,SAAS,cAAcD,EAAE,EAAE,EACtC,GAAI,CAACC,EAAI,QACKA,EAAG,aAAe,IAAI,QAAQ,OAAQ,GAAG,EAAE,OAEtC,MAAM,6BAAgB,GAAE,OAAQxF,GAAMA,EAAE,OAAS,CAAC,EAC/D,QAAQ,CAACA,EAAGyF,IAAQ,CACxBzD,EAAO,KAAK,CAAE,GAAI,GAAGuD,EAAE,EAAE,IAAIE,CAAG,GAAI,QAASF,EAAE,KAAM,KAAMvF,EAAG,EAC/D,EACF,EACMgC,CACT,CAGA,SAAS0D,GAASvF,EAAuD,CAEvE,MAAMlB,EAAQkB,EAAK,QAAQ,SAAU;AAAA,CAAI,EAAE,MAAM;AAAA,CAAI,EAAE,OAAQwF,GAAMA,EAAE,KAAK,EAAE,OAAS,CAAC,EAClFC,EAAmB,GACzB,UAAW1G,KAAQD,EAAO,CACxB,MAAM4G,EAAkB,GACxB,IAAIC,EAAM,GACNC,EAAW,GACf,QAASjD,EAAI,EAAGA,EAAI5D,EAAK,OAAQ4D,IAAK,CAC9B,MAAAkD,EAAK9G,EAAK4D,CAAC,EACbkD,IAAO,IACLD,GAAY7G,EAAK4D,EAAI,CAAC,IAAM,KACvBgD,GAAA,IACPhD,KAEAiD,EAAW,CAACA,EAELC,IAAO,KAAO,CAACD,GACxBF,EAAM,KAAKC,CAAG,EACRA,EAAA,IAECA,GAAAE,CAEX,CACAH,EAAM,KAAKC,CAAG,EACTF,EAAA,KAAKC,EAAM,IAAK1D,GAAMA,EAAE,KAAM,EAAC,CACtC,CAEO,OAAE,QADOyD,EAAK,MAAM,GAAK,GACd,KAAAA,EACpB,CAEA,SAASK,GAAWC,EAAmBN,EAAkB,CACvD,MAAMO,EAAIP,EAAK,OACTQ,EAAUF,EAAQ,IAAI,CAACG,EAAGC,IAAQ,CACtC,MAAMC,EAASX,EAAK,IAAKY,GAAMA,EAAEF,CAAG,CAAC,EAAE,OAAQlD,GAAMA,IAAM,MAAS,EAC9DqD,EAAOF,EAAO,IAAKnD,GAAM,OAAOA,CAAC,CAAC,EAAE,OAAQsD,GAAM,CAAC,OAAO,MAAMA,CAAC,CAAC,EAClEC,EAAYF,EAAK,QAAU,KAAK,IAAI,EAAG,KAAK,MAAMF,EAAO,OAAS,EAAG,CAAC,EACtEK,EAAW,IAAI,IAAIL,CAAM,EAAE,KAC3BM,EAAa,CAAE,OAAQR,EAAG,MAAOE,EAAO,OAAQ,SAAAK,GACtD,GAAID,EAAW,CACP,MAAAG,EAAOL,EAAK,OAAO,CAACjE,EAAGC,IAAMD,EAAIC,EAAG,CAAC,GAAKgE,EAAK,QAAU,GACzDM,EAAM,KAAK,KAAKN,EAAK,OAAO,CAACjE,EAAGC,IAAMD,EAAI,KAAK,IAAIC,EAAIqE,EAAM,CAAC,EAAG,CAAC,GAAKL,EAAK,QAAU,EAAE,EAExFO,EAAYP,EACf,IAAI,CAACrD,EAAGN,KAAO,CAAE,EAAAM,EAAG,EAAAN,EAAG,EAAGiE,EAAM,KAAK,KAAK3D,EAAI0D,GAAQC,CAAG,EAAI,GAAI,EACjE,OAAQE,GAAMA,EAAE,GAAK,CAAC,EACtB,MAAM,EAAG,EAAE,EACdJ,EAAM,QAAU,CAAE,KAAAC,EAAM,IAAAC,EAAK,UAAAC,CAAU,CACzC,CACO,OAAAH,CAAA,CACR,EACD,MAAO,CAAE,KAAMV,EAAG,QAASD,EAAQ,OAAQ,QAAAE,EAC7C,CAIA,MAAMc,EAAsF,CAAC,CAAE,MAAAC,EAAO,KAAAC,EAAM,SAAAC,KAExG9F,EAAA,KAAC,MAAI,WAAU,mEACb,UAACA,OAAA,OAAI,UAAU,yBACb,UAACC,EAAA,WAAI,UAAU,qGACZ,SACH4F,EAAA,EACC5F,EAAA,UAAG,UAAU,2BAA4B,SAAM2F,EAAA,GAClD,EACCE,CACH,IAOEC,GAAiH,CAAC,CAAE,KAAAC,EAAO,QAAS,SAAAxJ,EAAW,SAAU,UAAAyJ,EAAY,QAAS,aAAAC,KAAmB,CACrM,KAAM,CAACxE,EAAOyE,CAAQ,EAAIzG,WAAS,+CAA+C,EAC5E,CAAC0G,EAAQC,CAAS,EAAI3G,WAAiB,EAAE,EACzC,CAAC4G,EAASC,CAAU,EAAI7G,EAAA,SAA6D,CAAE,GACvF,CAAC8G,EAASC,CAAU,EAAI/G,WAAS,EAAK,EACtC,CAACgH,EAAeC,CAAgB,EAAIjH,WAAS,EAAK,EAClD,CAACkH,EAAkBC,CAAmB,EAAInH,WAAS,EAAK,EAExDoH,EAAUC,EAAQ,YAAMjD,GAAuB,EAAG,CAAE,GACpDkD,EAAgBC,SAAmB,IAAI,EAG7CpH,YAAU,IAAM,CACTiH,EAAQ,SACZ,SAAY,CACP,IACF,MAAM5E,EAAW,CAAE,KAAM,cAAe,OAAQ4E,EAAQ,IAAKlG,GAAMA,EAAE,IAAI,GAAK,aAAa,OACrF,CAENoG,EAAc,QAAU,IAC1B,KACC,EACF,CAACF,CAAO,CAAC,EACN,MAAAI,EAAmBD,SAAmB,IAAI,EAEhDpH,YAAU,IAAM,CACd,IAAIsH,EAAY,GAChB,OAAIlB,IAAc,YAAc,CAACiB,EAAiB,SAAWJ,EAAQ,SACnED,EAAoB,EAAI,EACxBrG,EAAmBsG,CAAO,EACvB,KAAM5C,GAAQ,CACRiD,IACHD,EAAiB,QAAUhD,EAC3ByC,EAAiB,EAAI,EACvB,CACD,EACA,QAAQ,IAAM,CAACQ,GAAaN,EAAoB,EAAK,CAAC,GAEpD,IAAM,CACCM,EAAA,GACd,EACC,CAAClB,EAAWa,CAAO,CAAC,EAEjB,MAAAM,EAAMC,cAAY,SAAY,CAClCZ,EAAW,EAAI,EACX,IACF,IAAIa,EAAyC,GAC7C,GAAIrB,IAAc,WAAY,CACxB,IAACiB,EAAiB,QAAS,CAC7Bb,EAAU,wDAAwD,EAClE,MACF,CACAiB,EAAM,MAAMJ,EAAiB,QAAQ,KAAKxF,EAAO,CAAC,MAG9C,KACI,MAAAtE,EAAW,MAAM8E,EAAW,CAAE,KAAM,aAAc,MAAAR,EAAO,EAAG,GAAK,mBAAmB,EAE1F4F,IADelK,GAAA,YAAAA,EAAK,QAAS,IACjB,IAAKmK,IAAQ,CAAE,MAAOT,EAAQS,EAAG,KAAK,EAAG,MAAOA,EAAG,OAAQ,OACjE,CACDP,EAAc,UACHA,EAAA,QAAUpE,GAAgBkE,CAAO,GAEjDQ,EAAMN,EAAc,QAAQ,KAAKtF,EAAO,CAAC,CAC3C,CAIF,GAFA6E,EAAWe,EAAI,IAAKnC,IAAO,CAAE,QAASA,EAAE,MAAM,QAAS,KAAMA,EAAE,MAAM,KAAM,MAAOA,EAAE,OAAQ,CAAC,EAEzFa,IAAS,MAAO,CACZ,MAAAzH,EAAMhC,EAAaC,CAAQ,EACjC,GAAI,CAAC+B,EAAK,CACR8H,EAAU,qEAAqE,EAChEH,GAAA,MAAAA,IACf,MACF,CACM,MAAAsB,EAAUF,EAAI,IAAI,CAACnC,EAAG5D,IAAM,IAAIA,EAAI,CAAC,MAAM4D,EAAE,MAAM,OAAO,KAAKA,EAAE,MAAM,IAAI,EAAE,EAAE,KAAK;AAAA,CAAI,EACxFrI,EAAS,wKACTD,EAAS,aAAa6E,CAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAAsH8F,CAAO,GAE9J,GAAIhL,IAAa,SAAU,CACnB,MAAAiL,EAAY,MAAMxK,EAAa,CAAE,SAAAT,EAAU,OAAQ+B,EAAK,OAAA1B,EAAQ,OAAAC,CAAA,CAAQ,EACpEuJ,EAAAoB,EAAU,MAAM,OAE1BpB,EAAU,EAAE,EACZ,MAAM3J,EAAmB,CAAE,SAAAF,EAAU,OAAQ+B,EAAK,OAAA1B,EAAQ,OAAAC,EAAQ,QAAUkG,GAAMqD,EAAWjG,GAASA,EAAO4C,CAAC,EAAG,CACnH,KACK,CAGC,MAAA0E,EAAQ,GAFEJ,EAAI,MAAM,EAAG,CAAC,EAAE,IAAKnC,GAAM,KAAKA,EAAE,MAAM,IAAI,EAAE,EAAE,KAAK;AAAA,CAAI,CAEjD;AAAA;AAAA,uIACxBkB,EAAUqB,CAAK,CACjB,SACA,CACAjB,EAAW,EAAK,CAClB,GACC,CAACR,EAAWvE,EAAOlF,EAAUsK,CAAO,CAAC,EAExCjH,mBAAU,IAAM,CAEVuH,GAEN,EAAG,CAAE,UAGF,MACC,WAACpH,OAAA,OAAI,UAAU,kCACb,UAAAC,EAAA,IAAC,SACC,MAAOyB,EACP,SAAWvB,GAAMgG,EAAShG,EAAE,OAAO,KAAK,EACxC,UAAU,wGACV,YAAY,4DACd,EACAF,EAAA,IAAC,UACC,QAASmH,EACT,UAAU,0FACV,SAAUZ,GAAW,CAAC9E,EAAM,KAAK,EAEhC,WAAU,YAAc,MAC3B,GACF,EAEC8E,QACE,MAAI,WAAU,iBAAiB,SAAS,qBAExC,MACE,WAAAP,IAAc,YAAc,CAACS,SAC3B,MAAI,WAAU,8BAA8B,SAAuD,4DAErGN,GACCnG,EAAA,IAAC,MAAI,WAAU,qCAAsC,SAAOmG,EAAA,EAE7DE,EAAQ,OAAS,GACftG,EAAA,YAAI,UAAU,OACb,UAACC,EAAA,WAAI,UAAU,8BAA8B,SAAY,iBACxDA,EAAA,UAAG,UAAU,YACX,SAAQqG,EAAA,IAAI,CAACtC,EAAGzC,IACfvB,OAAC,KAAW,WAAU,yBACpB,UAACA,OAAA,QAAK,UAAU,+BAA+B,cAAEgE,EAAE,QAAQ,KAAC,EAAO,IAAEA,EAAE,OADhEzC,CAET,CACD,EACH,GACF,GAEJ,CAEJ,GAEJ,EAEMoG,GAAwB,IAAM,CAClC,KAAM,CAACC,EAAUC,CAAW,EAAInI,WAAiB,EAAE,EAC7C,CAACiF,EAASmD,CAAU,EAAIpI,EAAA,SAAmB,CAAE,GAC7C,CAAC2E,EAAM0D,CAAO,EAAIrI,EAAA,SAAqB,CAAE,GACzC,CAACsI,EAASC,CAAU,EAAIvI,WAAqB,IAAI,EAEjDwI,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAEZC,EAAa,MAAOvJ,GAAiB,CACrC,IACI,MAAAxB,EAAW,MAAM8E,EAAW,CAAE,KAAM,YAAa,KAAAtD,CAAA,EAAQ,YAAY,EAC3EkJ,EAAW1K,EAAI,OAAO,EACtB2K,EAAQ3K,EAAI,IAAI,EAChB6K,EAAW7K,EAAI,OAAO,OAChB,CAEN,KAAM,CAAE,QAAAuH,EAAS,KAAAN,GAASF,GAASvF,CAAI,EACvCkJ,EAAWnD,CAAO,EAClBoD,EAAQ1D,CAAI,EACD4D,EAAAvD,GAAWC,EAASN,CAAI,CAAC,CACtC,GAGI+D,EAAS,MAAOC,GAAY,CAChCR,EAAYQ,EAAE,IAAI,EACZ,MAAAzJ,EAAO,MAAMyJ,EAAE,OACrBF,EAAWvJ,CAAI,GAGX0J,EAAiBvB,UAAQ,IAAM,CAC7B,MAAA7C,EAAMS,EAAQ,UAAWG,GAAMA,EAAE,cAAc,SAAS,UAAU,CAAC,EACzE,OAAIZ,IAAQ,GAAW,KAChBG,EAAK,OAAO,CAACkE,EAAKtD,IAAMsD,GAAO,OAAOtD,EAAEf,CAAG,CAAC,GAAK,GAAI,CAAC,GAC5D,CAACS,EAASN,CAAI,CAAC,EAElB,cACG,MACC,WAACrE,OAAA,OAAI,UAAU,8CACb,UAACA,OAAA,OAAI,UAAU,0BACb,UAACA,OAAA,SAAM,UAAU,mHACf,UAAAC,EAAA,IAAC3D,EAAO,MAAM,GAAI,UAAU,OAAO,EAAE,cACrC2D,MAAC,QAAM,MAAK,OAAO,OAAO,OAAO,UAAU,SAAS,SAAWE,GAAM,OACnE,MAAMkI,GAAInK,EAAAiC,EAAE,OAAO,QAAT,YAAAjC,EAAiB,GACvBmK,GAAGD,EAAOC,CAAC,GACd,GACL,EACApI,EAAA,IAAC,UACC,UAAU,2EACV,QAAS,IAAMkI,EAAWD,CAAS,EACpC,sBAED,GACF,EACCjI,EAAA,WAAI,UAAU,yBAA0B,YAAY,mBAAmB,GAC1E,EAEC+H,GACChI,EAAA,KAAC,MAAI,WAAU,iBACb,UAACA,OAAA,OAAI,UAAU,4BACb,UAACA,OAAA,OAAI,UAAU,qEACb,UAACC,EAAA,WAAI,UAAU,yBAAyB,SAAI,SAC3CA,EAAA,WAAI,UAAU,wBAAyB,WAAQ,KAAK,GACvD,EACAD,OAAC,MAAI,WAAU,qEACb,UAACC,EAAA,WAAI,UAAU,yBAAyB,SAAO,YAC9CA,EAAA,WAAI,UAAU,wBAAyB,WAAQ,QAAQ,GAC1D,EACAD,OAAC,MAAI,WAAU,qEACb,UAACC,EAAA,WAAI,UAAU,yBAAyB,SAA4B,iCACnEA,EAAA,WAAI,UAAU,wBAAyB,YAAkB,IAAI,GAChE,GACF,QAEC,MAAI,WAAU,kBACb,SAACD,EAAA,cAAM,UAAU,qBACf,UAAAC,MAAC,QACC,UAAAA,EAAA,IAAC,KACE,UAAA0E,EAAQ,IAAKG,GACX7E,MAAA,MAAW,UAAU,+DAAgE,SAAA6E,CAAA,EAA7EA,CAA+E,CACzF,CACH,GACF,EACC7E,EAAA,aACE,SAAKoE,EAAA,MAAM,EAAG,EAAE,EAAE,IAAI,CAACY,EAAG1D,IACzBtB,MAAC,MAAW,UAAU,uBACnB,SAAEgF,EAAA,IAAI,CAACrE,EAAG4H,IACTvI,EAAA,IAAC,KAAW,WAAU,4EAA6E,SAAAW,CAAA,EAA1F4H,CAA4F,CACtG,CAHM,EAAAjH,CAIT,CACD,EACH,GACF,CACF,UAEC,MACC,WAACtB,EAAA,WAAI,UAAU,kCAAkC,SAAe,oBAC/DA,EAAA,WAAI,UAAU,4BACZ,SAAQ+H,EAAA,QAAQ,IAAKjD,GACpB/E,OAAC,MAAqB,WAAU,sDAC9B,UAAAC,EAAA,IAAC,MAAI,WAAU,+BAAgC,SAAA8E,EAAI,OAAO,EAC1D/E,OAAC,MAAI,WAAU,yBAAyB,qBAAS+E,EAAI,MAAM,gBAAcA,EAAI,UAAS,EACrFA,EAAI,SACF/E,OAAA,OAAI,UAAU,8BACb,UAAAA,OAAC,MAAI,oBAAO+E,EAAI,QAAQ,KAAK,QAAQ,CAAC,EAAE,WAASA,EAAI,QAAQ,IAAI,QAAQ,CAAC,GAAE,EAC3EA,EAAI,QAAQ,UAAU,OAAS,GAC7B/E,OAAA,OAAI,UAAU,OACb,UAACC,EAAA,WAAI,UAAU,iBAAiB,SAAoB,yBACnDA,EAAA,UAAG,UAAU,uCACX,SAAI8E,EAAA,QAAQ,UAAU,IAAI,CAAC9D,EAAQM,IAClCvB,OAAC,KAAW,kBAAKiB,EAAE,EAAI,EAAE,KAAGA,EAAE,EAAE,OAAKA,EAAE,EAAE,QAAQ,CAAC,EAAE,MAA3CM,CAA4C,CACtD,EACH,GACF,GAEJ,CAhBM,GAAAwD,EAAI,MAkBd,CACD,EACH,GACF,GACF,CAEJ,GAEJ,EAEM0D,GAAkB,IAAM,CAC5B,KAAM,CAACC,EAAcC,CAAe,EAAIjJ,WAAS,EAAK,EAChD,CAACsG,EAAM4C,CAAO,EAAIlJ,WAAe,OAAO,EACxC,CAAClD,EAAUqM,CAAW,EAAInJ,EAAmB,SAAAlB,EAAA,GAAuB,QAAQ,EAC5E,CAACyH,EAAW6C,CAAY,EAAIpJ,WAAwB,OAAO,EAEjE,OACGM,OAAA,WAAQ,GAAG,SAAS,UAAU,0BAC7B,UAACA,OAAA,OAAI,UAAU,OACb,UAACA,OAAA,OAAI,UAAU,gHACb,UAAAC,EAAA,IAAC8I,EAAS,MAAM,GAAI,UAAU,OAAM,EAAE,kCACxC,EACA/I,OAAC,MAAI,WAAU,qEACb,UAAAA,OAAC,MACC,WAACC,EAAA,UAAG,UAAU,gCAAgC,SAAoB,yBACjEA,EAAA,SAAE,UAAU,gCAAgC,SAAuG,6GACtJ,EACAD,OAAC,MAAI,WAAU,0BACb,UAACA,OAAA,OAAI,UAAU,oFACb,UAAAC,EAAA,IAAC,UACC,QAAS,IAAM2I,EAAQ,OAAO,EAC9B,UAAW,qBAAqB5C,IAAS,QAAU,4BAA8B,gBAAgB,GAClG,iBAAK,EACN/F,EAAA,IAAC,UACC,QAAS,IAAM2I,EAAQ,KAAK,EAC5B,UAAW,+CAA+C5C,IAAS,MAAQ,4BAA8B,gBAAgB,GAC1H,eAAG,GACN,EACCA,IAAS,OACRhG,EAAA,KAAC,UACC,UAAU,mFACV,MAAOxD,EACP,SAAW2D,GAAM0I,EAAY1I,EAAE,OAAO,KAAiB,EAEvD,UAACF,EAAA,cAAO,MAAM,SAAS,SAAM,WAC5BA,EAAA,cAAO,MAAM,OAAO,SAAI,SACxBA,EAAA,cAAO,MAAM,aAAa,SAAU,gBACvC,EAEFD,EAAA,KAAC,UACC,UAAU,4GACV,QAAS,IAAM2I,EAAgB,EAAI,EACnC,MAAM,8BAEN,UAAA1I,EAAA,IAAC+I,EAAa,MAAM,GAAI,UAAU,OAAM,EAAE,aAC5C,GACF,GACF,GACF,EAEAhJ,OAAC,MAAI,WAAU,4BACb,UAACA,OAAA2F,EAAA,CAAK,MAAM,mBAAmB,WAAOxJ,EAAI,MAAM,EAAG,GACjD,UAAC6D,OAAA,OAAI,UAAU,+BACb,UAACC,EAAA,YAAK,UAAU,yBAAyB,SAAU,eACnDD,OAAC,MAAI,WAAU,oFACb,UAAAC,EAAA,IAAC,SAAO,SAAS,IAAM6I,EAAa,OAAO,EAAG,UAAW,qBAAqB7C,IAAc,QAAU,4BAA8B,gBAAgB,GAAI,SAAM,WAC7JhG,EAAA,cAAO,QAAS,IAAM6I,EAAa,UAAU,EAAG,UAAW,+CAA+C7C,IAAc,WAAa,4BAA8B,gBAAgB,GAAI,SAAe,qBACzM,GACF,EACAhG,MAAC8F,IAAS,KAAAC,EAAY,SAAAxJ,EAAoB,UAAAyJ,EAAsB,aAAc,IAAM0C,EAAgB,EAAI,EAAG,GAC7G,EACC1I,EAAA,IAAA0F,EAAA,CAAK,MAAM,wBAAwB,KAAM1F,MAACgJ,EAAS,MAAM,EAAG,GAC3D,SAAChJ,EAAA,IAAA0H,GAAA,CAAW,GACd,GACF,EAEA1H,MAACb,EAAc,MAAMsJ,EAAc,QAAS,IAAMC,EAAgB,EAAK,EAAG,QAAS,IAAM,CAEvF,MAAMlK,EAAID,IACNC,GAAGoK,EAAYpK,CAAC,GACnB,CACL,GAEJ","names":["Bot","createLucideIcon","Settings","Upload","getStoredKey","provider","map","callProviderStream","params","apiKey","prompt","system","onToken","full","callProvider","endpoint","body","res","reader","decoder","buffer","done","value","lines","line","trimmed","payload","json","delta","_c","_b","_a","_f","_e","_d","setStoredKey","key","getStoredProvider","p","setStoredProvider","data","text","_h","_g","_k","_j","_i","providers","label","SettingsModal","open","onClose","onSaved","keys","setKeys","useState","defaultProvider","setDefaultProvider","useEffect","k","save","jsxs","jsx","X","e","prev","embedderPromise","getEmbedder","pipeline","buildSemanticIndex","chunks","extractor","vectors","c","output","embed","out","cosineSim","a","b","dot","a2","b2","len","i","denom","topK","query","q","scored","v","score","sharedWorker","getWorker","makeId","postWorker","msg","waitFor","worker","reqId","resolve","reject","timeout","onMsg","tokenize","buildTfidfIndex","docs","df","tokens","t","N","idf","d","term","docVecs","tf","vec","count","weight","vectorize","av","bv","dv","extractPortfolioChunks","sections","s","el","idx","parseCSV","l","rows","cells","cur","inQuotes","ch","profileCSV","headers","n","summary","h","col","values","r","nums","x","isNumeric","distinct","basic","mean","std","anomalies","o","Card","title","icon","children","ResumeQA","mode","retrieval","onMissingKey","setQuery","answer","setAnswer","sources","setSources","loading","setLoading","semanticReady","setSemanticReady","semanticBuilding","setSemanticBuilding","dataset","useMemo","tfidfIndexRef","useRef","semanticIndexRef","cancelled","run","useCallback","top","it","context","apiAnswer","draft","CSVInsights","fileName","setFileName","setHeaders","setRows","profile","setProfile","sampleCSV","handleText","onFile","f","totalIncidents","acc","j","AILab","openSettings","setOpenSettings","setMode","setProvider","setRetrieval","Sparkles","SettingsIcon","Database"],"sources":["../../node_modules/lucide-react/dist/esm/icons/bot.mjs","../../node_modules/lucide-react/dist/esm/icons/settings.mjs","../../node_modules/lucide-react/dist/esm/icons/upload.mjs","../../src/utils/aiProviders.ts","../../src/components/SettingsModal.tsx","../../src/utils/retrieval.ts","../../src/components/AILab.tsx"],"sourcesContent":["/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Bot = createLucideIcon(\"Bot\", [\n  [\n    \"rect\",\n    { width: \"18\", height: \"10\", x: \"3\", y: \"11\", rx: \"2\", key: \"1ofdy3\" }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"5\", r: \"2\", key: \"f1ur92\" }],\n  [\"path\", { d: \"M12 7v4\", key: \"xawao1\" }],\n  [\"line\", { x1: \"8\", x2: \"8\", y1: \"16\", y2: \"16\", key: \"h6x27f\" }],\n  [\"line\", { x1: \"16\", x2: \"16\", y1: \"16\", y2: \"16\", key: \"5lty7f\" }]\n]);\n\nexport { Bot as default };\n//# sourceMappingURL=bot.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Settings = createLucideIcon(\"Settings\", [\n  [\n    \"path\",\n    {\n      d: \"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\",\n      key: \"1qme2f\"\n    }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"3\", key: \"1v7zrd\" }]\n]);\n\nexport { Settings as default };\n//# sourceMappingURL=settings.mjs.map\n","/**\n * lucide-react v0.0.1 - ISC\n */\n\nimport createLucideIcon from '../createLucideIcon.mjs';\n\nconst Upload = createLucideIcon(\"Upload\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"17 8 12 3 7 8\", key: \"t8dd8p\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"3\", y2: \"15\", key: \"widbto\" }]\n]);\n\nexport { Upload as default };\n//# sourceMappingURL=upload.mjs.map\n","export type Provider = 'gemini' | 'groq' | 'openrouter';\n\nexport function getStoredKey(provider: Provider): string | null {\n  if (typeof localStorage === 'undefined') return null;\n  const map: Record<Provider, string> = {\n    gemini: 'gemini_api_key',\n    groq: 'groq_api_key',\n    openrouter: 'openrouter_api_key',\n  };\n  return localStorage.getItem(map[provider]);\n}\n\nexport async function callProviderStream(params: {\n  provider: Provider;\n  apiKey: string;\n  prompt: string;\n  system?: string;\n  onToken: (t: string) => void;\n}): Promise<void> {\n  const { provider, apiKey, prompt, system, onToken } = params;\n  if (!apiKey) throw new Error('Missing API key for selected provider.');\n\n  if (provider === 'gemini') {\n    // Gemini browser streaming is not standardized here; fall back to non-streaming\n    const full = await callProvider({ provider, apiKey, prompt, system });\n    onToken(full);\n    return;\n  }\n\n  const endpoint = provider === 'groq'\n    ? 'https://api.groq.com/openai/v1/chat/completions'\n    : 'https://openrouter.ai/api/v1/chat/completions';\n\n  const body = {\n    model: provider === 'groq' ? 'llama-3.1-8b-instant' : 'meta-llama/llama-3.1-8b-instruct',\n    messages: [\n      ...(system ? [{ role: 'system', content: system }] : []),\n      { role: 'user', content: prompt },\n    ],\n    temperature: 0.5,\n    max_tokens: 160,\n    stream: true,\n  } as any;\n\n  const res = await fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify(body),\n  });\n  if (!res.ok || !res.body) throw new Error(`${provider} stream error: ${res.status} ${res.statusText}`);\n\n  const reader = res.body.getReader();\n  const decoder = new TextDecoder('utf-8');\n  let buffer = '';\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    buffer += decoder.decode(value, { stream: true });\n    const lines = buffer.split('\\n');\n    buffer = lines.pop() || '';\n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (!trimmed || !trimmed.startsWith('data:')) continue;\n      const payload = trimmed.slice(5).trim();\n      if (payload === '[DONE]') return;\n      try {\n        const json = JSON.parse(payload);\n        const delta = json?.choices?.[0]?.delta?.content ?? json?.choices?.[0]?.message?.content ?? '';\n        if (delta) onToken(delta as string);\n      } catch (e) {\n        // skip malformed lines\n      }\n    }\n  }\n}\n\nexport function setStoredKey(provider: Provider, key: string) {\n  if (typeof localStorage === 'undefined') return;\n  const map: Record<Provider, string> = {\n    gemini: 'gemini_api_key',\n    groq: 'groq_api_key',\n    openrouter: 'openrouter_api_key',\n  };\n  localStorage.setItem(map[provider], key.trim());\n}\n\nexport function getStoredProvider(): Provider | null {\n  if (typeof localStorage === 'undefined') return null;\n  const p = localStorage.getItem('ai_provider');\n  if (p === 'gemini' || p === 'groq' || p === 'openrouter') return p;\n  return null;\n}\n\nexport function setStoredProvider(provider: Provider) {\n  if (typeof localStorage === 'undefined') return;\n  localStorage.setItem('ai_provider', provider);\n}\n\nexport async function callProvider(params: {\n  provider: Provider;\n  apiKey: string;\n  prompt: string;\n  system?: string;\n}): Promise<string> {\n  const { provider, apiKey, prompt, system } = params;\n\n  if (!apiKey) throw new Error('Missing API key for selected provider.');\n\n  if (provider === 'gemini') {\n    // Google Generative Language API (AI Studio) - Gemini 1.5 Flash\n    const endpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=' + encodeURIComponent(apiKey);\n    const body = {\n      contents: [\n        {\n          role: 'user',\n          parts: [{ text: (system ? `System: ${system}\\n\\n` : '') + prompt }],\n        },\n      ],\n      generationConfig: { temperature: 0.5, maxOutputTokens: 160 },\n    };\n\n    const res = await fetch(endpoint, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    });\n    if (!res.ok) throw new Error(`Gemini error: ${res.status} ${res.statusText}`);\n    const data = await res.json();\n    const text = data?.candidates?.[0]?.content?.parts?.[0]?.text;\n    if (!text) throw new Error('Gemini returned no content');\n    return text as string;\n  }\n\n  if (provider === 'groq') {\n    const endpoint = 'https://api.groq.com/openai/v1/chat/completions';\n    const body = {\n      model: 'llama-3.1-8b-instant',\n      messages: [\n        ...(system ? [{ role: 'system', content: system }] : []),\n        { role: 'user', content: prompt },\n      ],\n      temperature: 0.5,\n      max_tokens: 160,\n    };\n    const res = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify(body),\n    });\n    if (!res.ok) throw new Error(`Groq error: ${res.status} ${res.statusText}`);\n    const data = await res.json();\n    const text = data?.choices?.[0]?.message?.content;\n    if (!text) throw new Error('Groq returned no content');\n    return text as string;\n  }\n\n  if (provider === 'openrouter') {\n    const endpoint = 'https://openrouter.ai/api/v1/chat/completions';\n    const body = {\n      model: 'meta-llama/llama-3.1-8b-instruct',\n      messages: [\n        ...(system ? [{ role: 'system', content: system }] : []),\n        { role: 'user', content: prompt },\n      ],\n      temperature: 0.5,\n      max_tokens: 160,\n    };\n    const res = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n        // Optional headers for attribution; can be added later\n        // 'HTTP-Referer': location.origin,\n        // 'X-Title': 'DJ Cline Portfolio',\n      },\n      body: JSON.stringify(body),\n    });\n    if (!res.ok) throw new Error(`OpenRouter error: ${res.status} ${res.statusText}`);\n    const data = await res.json();\n    const text = data?.choices?.[0]?.message?.content;\n    if (!text) throw new Error('OpenRouter returned no content');\n    return text as string;\n  }\n\n  throw new Error('Unsupported provider');\n}\n","import React, { useEffect, useState } from 'react';\nimport { X } from 'lucide-react';\nimport { Provider, getStoredKey, setStoredKey, getStoredProvider, setStoredProvider } from '../utils/aiProviders';\n\ninterface SettingsModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSaved?: () => void;\n}\n\nconst providers: Provider[] = ['gemini', 'groq', 'openrouter'];\n\nconst label: Record<Provider, string> = {\n  gemini: 'Google Gemini (AI Studio)',\n  groq: 'Groq (Llama/Mixtral)',\n  openrouter: 'OpenRouter (Multi‑model)',\n};\n\nconst SettingsModal: React.FC<SettingsModalProps> = ({ open, onClose, onSaved }) => {\n  const [keys, setKeys] = useState<Record<Provider, string>>({ gemini: '', groq: '', openrouter: '' });\n  const [defaultProvider, setDefaultProvider] = useState<Provider>('gemini');\n\n  useEffect(() => {\n    if (!open) return;\n    const k: Record<Provider, string> = {\n      gemini: getStoredKey('gemini') || '',\n      groq: getStoredKey('groq') || '',\n      openrouter: getStoredKey('openrouter') || '',\n    };\n    setKeys(k);\n    setDefaultProvider(getStoredProvider() || 'gemini');\n  }, [open]);\n\n  const save = () => {\n    providers.forEach((p) => setStoredKey(p, keys[p]));\n    setStoredProvider(defaultProvider);\n    onSaved?.();\n    onClose();\n  };\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n      <div className=\"absolute inset-0 bg-black/60\" onClick={onClose} />\n      <div className=\"relative z-10 w-full max-w-lg bg-slate-900 border border-slate-700 rounded-xl shadow-xl\">\n        <div className=\"flex items-center justify-between p-4 border-b border-slate-700\">\n          <h3 className=\"text-white font-semibold\">AI Settings</h3>\n          <button onClick={onClose} className=\"text-slate-300 hover:text-white\">\n            <X size={18} />\n          </button>\n        </div>\n        <div className=\"p-4 space-y-4\">\n          <div>\n            <label className=\"block text-sm text-slate-300 mb-1\">Default Provider</label>\n            <select\n              className=\"w-full bg-slate-950 border border-slate-700 rounded-lg px-3 py-2 text-slate-200\"\n              value={defaultProvider}\n              onChange={(e) => setDefaultProvider(e.target.value as Provider)}\n            >\n              {providers.map((p) => (\n                <option key={p} value={p}>{label[p]}</option>\n              ))}\n            </select>\n          </div>\n          {providers.map((p) => (\n            <div key={p}>\n              <label className=\"block text-sm text-slate-300 mb-1\">{label[p]} API Key</label>\n              <input\n                type=\"password\"\n                className=\"w-full bg-slate-950 border border-slate-700 rounded-lg px-3 py-2 text-slate-200\"\n                placeholder={`Enter ${p} API key (stored locally)`}\n                value={keys[p]}\n                onChange={(e) => setKeys((prev) => ({ ...prev, [p]: e.target.value }))}\n              />\n            </div>\n          ))}\n          <div className=\"text-xs text-slate-400\">\n            Your keys are stored only in this browser via localStorage and are never sent to any server except the provider you call.\n          </div>\n        </div>\n        <div className=\"p-4 border-t border-slate-700 flex justify-end gap-2\">\n          <button className=\"px-3 py-2 bg-slate-800 border border-slate-700 rounded-lg text-slate-200\" onClick={onClose}>Cancel</button>\n          <button className=\"px-3 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg\" onClick={save}>Save</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsModal;\n","export type Chunk = { id: string; section: string; text: string };\n\n// ----- Tokenization -----\nexport function tokenize(text: string): string[] {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(Boolean);\n}\n\n// ----- TF-IDF index -----\nexport function buildTfidfIndex(chunks: Chunk[]) {\n  const docs = chunks.map((c) => tokenize(c.text));\n  const df = new Map<string, number>();\n  for (const tokens of docs) {\n    const uniq = new Set(tokens);\n    uniq.forEach((t) => df.set(t, (df.get(t) || 0) + 1));\n  }\n  const N = docs.length || 1;\n  const idf = new Map<string, number>();\n  df.forEach((d, term) => idf.set(term, Math.log((N + 1) / (d + 1)) + 1));\n\n  const docVecs = docs.map((tokens) => {\n    const tf = new Map<string, number>();\n    for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n    const vec = new Map<string, number>();\n    tf.forEach((count, term) => {\n      const weight = (count / tokens.length) * (idf.get(term) || 0);\n      vec.set(term, weight);\n    });\n    return vec;\n  });\n\n  function vectorize(text: string) {\n    const tokens = tokenize(text);\n    const tf = new Map<string, number>();\n    for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n    const vec = new Map<string, number>();\n    tf.forEach((count, term) => {\n      const weight = (count / tokens.length) * (idf.get(term) || 0);\n      vec.set(term, weight);\n    });\n    return vec;\n  }\n\n  function cosineSim(a: Map<string, number>, b: Map<string, number>) {\n    let dot = 0;\n    let a2 = 0;\n    let b2 = 0;\n    a.forEach((av, t) => {\n      a2 += av * av;\n      const bv = b.get(t) || 0;\n      dot += av * bv;\n    });\n    b.forEach((bv) => (b2 += bv * bv));\n    const denom = Math.sqrt(a2) * Math.sqrt(b2);\n    return denom ? dot / denom : 0;\n  }\n\n  function topK(query: string, k = 3) {\n    const q = vectorize(query);\n    const scored = docVecs.map((dv, i) => ({ i, score: cosineSim(q, dv) }));\n    scored.sort((a, b) => b.score - a.score);\n    return scored.slice(0, k).map(({ i, score }) => ({ chunk: chunks[i], score }));\n  }\n\n  return { topK };\n}\n\n// ----- Semantic embeddings (lazy, via Transformers.js CDN) -----\nlet embedderPromise: Promise<any> | null = null;\nasync function getEmbedder() {\n  if (!embedderPromise) {\n    embedderPromise = (async () => {\n      // Use ESM CDN for browser-friendly dynamic import\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const mod = await import('https://esm.sh/@xenova/transformers');\n      const pipeline = (mod as any).pipeline;\n      const extractor = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n      return extractor;\n    })();\n  }\n  return embedderPromise;\n}\n\nexport async function buildSemanticIndex(chunks: Chunk[]) {\n  const extractor = await getEmbedder();\n  // Compute embeddings for each chunk (mean pooled)\n  const vectors = [] as number[][];\n  for (const c of chunks) {\n    const output = await extractor(c.text, { pooling: 'mean', normalize: true });\n    const data = Array.from(output.data as Float32Array);\n    vectors.push(data);\n  }\n\n  function embed(text: string) {\n    return extractor(text, { pooling: 'mean', normalize: true }).then((out: any) => Array.from(out.data as Float32Array) as number[]);\n  }\n\n  function cosineSim(a: number[], b: number[]) {\n    let dot = 0;\n    let a2 = 0;\n    let b2 = 0;\n    const len = Math.min(a.length, b.length);\n    for (let i = 0; i < len; i++) {\n      dot += a[i] * b[i];\n      a2 += a[i] * a[i];\n      b2 += b[i] * b[i];\n    }\n    const denom = Math.sqrt(a2) * Math.sqrt(b2);\n    return denom ? dot / denom : 0;\n  }\n\n  async function topK(query: string, k = 3) {\n    const q = await embed(query);\n    const scored = vectors.map((v, i) => ({ i, score: cosineSim(q, v) }));\n    scored.sort((a, b) => b.score - a.score);\n    return scored.slice(0, k).map(({ i, score }) => ({ chunk: chunks[i], score }));\n  }\n\n  return { topK };\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Bot, Upload, Sparkles, Database, Settings as SettingsIcon } from 'lucide-react';\nimport SettingsModal from './SettingsModal';\nimport { Provider, getStoredKey, getStoredProvider, callProvider, callProviderStream } from '../utils/aiProviders';\nimport { buildSemanticIndex } from '../utils/retrieval';\n\n// ---- Simple Local RAG (TF-IDF) utilities ----\n\n// Shared worker for off-main-thread tasks (TF-IDF & CSV)\nlet sharedWorker: Worker | null = null;\nfunction getWorker(): Worker {\n  if (!sharedWorker) {\n    // Vite-friendly worker import\n    sharedWorker = new Worker(new URL('../workers/aiWorker.ts', import.meta.url), { type: 'module' });\n  }\n  return sharedWorker;\n}\n\nfunction makeId() {\n  return Math.random().toString(36).slice(2);\n}\n\nasync function postWorker<T = any>(msg: any, waitFor: string): Promise<T> {\n  const worker = getWorker();\n  const reqId = msg.reqId || makeId();\n  return new Promise<T>((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      worker.removeEventListener('message', onMsg as any);\n      reject(new Error('Worker timeout'));\n    }, 8000);\n    function onMsg(e: MessageEvent<any>) {\n      const data = e.data;\n      if (!data || (data.type !== waitFor && data.type !== 'error')) return;\n      if (data.type === 'error' && (!data.reqId || data.reqId === reqId)) {\n        clearTimeout(timeout);\n        worker.removeEventListener('message', onMsg as any);\n        reject(new Error(data.message || 'Worker error'));\n        return;\n      }\n      if (data.reqId === reqId || waitFor === 'tfidf_ready') {\n        clearTimeout(timeout);\n        worker.removeEventListener('message', onMsg as any);\n        resolve(data as T);\n      }\n    }\n    worker.addEventListener('message', onMsg as any);\n    worker.postMessage({ ...msg, reqId });\n  });\n}\n\ntype Chunk = {\n  id: string;\n  section: string;\n  text: string;\n};\n\nfunction tokenize(text: string): string[] {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(Boolean);\n}\n\nfunction buildTfidfIndex(chunks: Chunk[]) {\n  const docs = chunks.map((c) => tokenize(c.text));\n  const df = new Map<string, number>();\n  for (const tokens of docs) {\n    const uniq = new Set(tokens);\n    uniq.forEach((t) => df.set(t, (df.get(t) || 0) + 1));\n  }\n  const N = docs.length || 1;\n  const idf = new Map<string, number>();\n  df.forEach((d, term) => idf.set(term, Math.log((N + 1) / (d + 1)) + 1));\n\n  const docVecs = docs.map((tokens) => {\n    const tf = new Map<string, number>();\n    for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n    const vec = new Map<string, number>();\n    tf.forEach((count, term) => {\n      const weight = (count / tokens.length) * (idf.get(term) || 0);\n      vec.set(term, weight);\n    });\n    return vec;\n  });\n\n  function vectorize(text: string) {\n    const tokens = tokenize(text);\n    const tf = new Map<string, number>();\n    for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n    const vec = new Map<string, number>();\n    tf.forEach((count, term) => {\n      const weight = (count / tokens.length) * (idf.get(term) || 0);\n      vec.set(term, weight);\n    });\n    return vec;\n  }\n\n  function cosineSim(a: Map<string, number>, b: Map<string, number>) {\n    let dot = 0;\n    let a2 = 0;\n    let b2 = 0;\n    a.forEach((av, t) => {\n      a2 += av * av;\n      const bv = b.get(t) || 0;\n      dot += av * bv;\n    });\n    b.forEach((bv) => (b2 += bv * bv));\n    const denom = Math.sqrt(a2) * Math.sqrt(b2);\n    return denom ? dot / denom : 0;\n  }\n\n  function topK(query: string, k = 3) {\n    const q = vectorize(query);\n    const scored = docVecs.map((dv, i) => ({ i, score: cosineSim(q, dv) }));\n    scored.sort((a, b) => b.score - a.score);\n    return scored.slice(0, k).map(({ i, score }) => ({ chunk: chunks[i], score }));\n  }\n\n  return { topK };\n}\n\nfunction extractPortfolioChunks(): Chunk[] {\n  const sections = [\n    { id: '#about', name: 'About' },\n    { id: '#experience', name: 'Experience' },\n    { id: '#skills', name: 'Skills' },\n    { id: '#frameworks', name: 'Frameworks' },\n    { id: '#audit-outcomes', name: 'Audit Outcomes' },\n    { id: '#skills-matrix', name: 'Skills Matrix' },\n    { id: '#achievements', name: 'Achievements' },\n  ];\n  const chunks: Chunk[] = [];\n  sections.forEach((s) => {\n    const el = document.querySelector(s.id);\n    if (!el) return;\n    const text = (el.textContent || '').replace(/\\s+/g, ' ').trim();\n    // Split into sentences-ish\n    const parts = text.split(/(?<=[\\.!?])\\s+/).filter((p) => p.length > 0);\n    parts.forEach((p, idx) => {\n      chunks.push({ id: `${s.id}-${idx}`, section: s.name, text: p });\n    });\n  });\n  return chunks;\n}\n\n// ---- CSV utils (lightweight parser) ----\nfunction parseCSV(text: string): { headers: string[]; rows: string[][] } {\n  // Handles quoted fields with commas. Not RFC-perfect but robust for demos.\n  const lines = text.replace(/\\r\\n?/g, '\\n').split('\\n').filter((l) => l.trim().length > 0);\n  const rows: string[][] = [];\n  for (const line of lines) {\n    const cells: string[] = [];\n    let cur = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const ch = line[i];\n      if (ch === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          cur += '\"';\n          i++; // skip escaped quote\n        } else {\n          inQuotes = !inQuotes;\n        }\n      } else if (ch === ',' && !inQuotes) {\n        cells.push(cur);\n        cur = '';\n      } else {\n        cur += ch;\n      }\n    }\n    cells.push(cur);\n    rows.push(cells.map((c) => c.trim()));\n  }\n  const headers = rows.shift() || [];\n  return { headers, rows };\n}\n\nfunction profileCSV(headers: string[], rows: string[][]) {\n  const n = rows.length;\n  const summary = headers.map((h, col) => {\n    const values = rows.map((r) => r[col]).filter((v) => v !== undefined);\n    const nums = values.map((v) => Number(v)).filter((x) => !Number.isNaN(x));\n    const isNumeric = nums.length >= Math.max(3, Math.floor(values.length * 0.6));\n    const distinct = new Set(values).size;\n    const basic: any = { header: h, count: values.length, distinct };\n    if (isNumeric) {\n      const mean = nums.reduce((a, b) => a + b, 0) / (nums.length || 1);\n      const std = Math.sqrt(nums.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / (nums.length || 1));\n      // z-score anomalies\n      const anomalies = nums\n        .map((v, i) => ({ v, i, z: std ? Math.abs((v - mean) / std) : 0 }))\n        .filter((o) => o.z >= 3)\n        .slice(0, 10);\n      basic.numeric = { mean, std, anomalies };\n    }\n    return basic;\n  });\n  return { rows: n, columns: headers.length, summary };\n}\n\n// ---- Components ----\n\nconst Card: React.FC<{ title: string; icon: React.ReactNode; children: React.ReactNode }> = ({ title, icon, children }) => {\n  return (\n    <div className=\"bg-slate-800/60 border border-slate-700 rounded-xl p-5 shadow-md\">\n      <div className=\"flex items-center mb-3\">\n        <div className=\"inline-flex items-center justify-center w-9 h-9 rounded-lg bg-primary-600/20 text-primary-400 mr-2\">\n          {icon}\n        </div>\n        <h3 className=\"text-white font-semibold\">{title}</h3>\n      </div>\n      {children}\n    </div>\n  );\n};\n\ntype Mode = 'local' | 'api';\ntype RetrievalMode = 'tfidf' | 'semantic';\n\nconst ResumeQA: React.FC<{ mode?: Mode; provider?: Provider; retrieval?: RetrievalMode; onMissingKey?: () => void }> = ({ mode = 'local', provider = 'gemini', retrieval = 'tfidf', onMissingKey }) => {\n  const [query, setQuery] = useState('What are your top cybersecurity achievements?');\n  const [answer, setAnswer] = useState<string>('');\n  const [sources, setSources] = useState<{ section: string; text: string; score: number }[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [semanticReady, setSemanticReady] = useState(false);\n  const [semanticBuilding, setSemanticBuilding] = useState(false);\n\n  const dataset = useMemo(() => extractPortfolioChunks(), []);\n  const tfidfIndexRef = useRef<any | null>(null);\n\n  // Build TF-IDF in worker (non-blocking). Fallback: on-demand build in main if worker fails.\n  useEffect(() => {\n    if (!dataset.length) return;\n    (async () => {\n      try {\n        await postWorker({ type: 'tfidf_build', chunks: dataset.map((c) => c.text) }, 'tfidf_ready');\n      } catch {\n        // fallback lazily when/if needed\n        tfidfIndexRef.current = null;\n      }\n    })();\n  }, [dataset]);\n  const semanticIndexRef = useRef<any | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (retrieval === 'semantic' && !semanticIndexRef.current && dataset.length) {\n      setSemanticBuilding(true);\n      buildSemanticIndex(dataset)\n        .then((idx) => {\n          if (!cancelled) {\n            semanticIndexRef.current = idx;\n            setSemanticReady(true);\n          }\n        })\n        .finally(() => !cancelled && setSemanticBuilding(false));\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [retrieval, dataset]);\n\n  const run = useCallback(async () => {\n    setLoading(true);\n    try {\n      let top: { chunk: Chunk; score: number }[] = [] as any;\n      if (retrieval === 'semantic') {\n        if (!semanticIndexRef.current) {\n          setAnswer('Building semantic index… please try again in a moment.');\n          return;\n        }\n        top = await semanticIndexRef.current.topK(query, 3);\n      } else {\n        // Prefer worker; fallback to main-thread TF-IDF if worker unavailable\n        try {\n          const res: any = await postWorker({ type: 'tfidf_topk', query, k: 3 }, 'tfidf_topk_result');\n          const items = (res?.items || []) as { index: number; score: number }[];\n          top = items.map((it) => ({ chunk: dataset[it.index], score: it.score }));\n        } catch {\n          if (!tfidfIndexRef.current) {\n            tfidfIndexRef.current = buildTfidfIndex(dataset);\n          }\n          top = tfidfIndexRef.current.topK(query, 3);\n        }\n      }\n      setSources(top.map((x) => ({ section: x.chunk.section, text: x.chunk.text, score: x.score })));\n\n      if (mode === 'api') {\n        const key = getStoredKey(provider);\n        if (!key) {\n          setAnswer('No API key found for selected provider. Open Settings to add a key.');\n          onMissingKey?.();\n          return;\n        }\n        const context = top.map((x, i) => `[${i + 1} | ${x.chunk.section}] ${x.chunk.text}`).join('\\n');\n        const system = 'You are a concise executive AI assistant. Keep answers under 60 words. Prefer 2 short sentences; if bullets are clearer, use up to 3 very short bullets. No preamble.';\n        const prompt = `Question: ${query}\\n\\nUse the resume context below to answer in under 60 words. Cite sections inline briefly if useful.\\n\\nContext:\\n${context}`;\n        // Stream if supported\n        if (provider === 'gemini') {\n          const apiAnswer = await callProvider({ provider, apiKey: key, prompt, system });\n          setAnswer(apiAnswer.trim());\n        } else {\n          setAnswer('');\n          await callProviderStream({ provider, apiKey: key, prompt, system, onToken: (t) => setAnswer((prev) => prev + t) });\n        }\n      } else {\n        const bullets = top.slice(0, 2).map((x) => `- ${x.chunk.text}`).join('\\n');\n        const summary = 'Summary: Focused, measurable outcomes in security governance and transformation; ask for specifics (SOX, NIST, Zero Trust) if needed.';\n        const draft = `${bullets}\\n\\n${summary}`;\n        setAnswer(draft);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [retrieval, query, provider, dataset]);\n\n  useEffect(() => {\n    // Pre-run once after mount\n    run();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <div className=\"flex flex-col sm:flex-row gap-2\">\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          className=\"flex-1 bg-slate-900 border border-slate-700 rounded-lg px-3 py-2 text-slate-200 placeholder-slate-400\"\n          placeholder=\"Ask about my experience, security work, AI strategy, etc.\"\n        />\n        <button\n          onClick={run}\n          className=\"px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg disabled:opacity-50\"\n          disabled={loading || !query.trim()}\n        >\n          {loading ? 'Thinking…' : 'Ask'}\n        </button>\n      </div>\n\n      {loading ? (\n        <div className=\"text-slate-300\">Thinking…</div>\n      ) : (\n        <div>\n          {retrieval === 'semantic' && !semanticReady && (\n            <div className=\"text-xs text-slate-400 mb-2\">Semantic retrieval (embeddings) will load on first use…</div>\n          )}\n          {answer && (\n            <div className=\"text-slate-200 whitespace-pre-wrap\">{answer}</div>\n          )}\n          {sources.length > 0 && (\n            <div className=\"mt-3\">\n              <div className=\"text-sm text-slate-400 mb-1\">Top sources:</div>\n              <ul className=\"space-y-2\">\n                {sources.map((s, i) => (\n                  <li key={i} className=\"text-sm text-slate-300\">\n                    <span className=\"text-primary-400 font-medium\">[{s.section}]</span> {s.text}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst CSVInsights: React.FC = () => {\n  const [fileName, setFileName] = useState<string>('');\n  const [headers, setHeaders] = useState<string[]>([]);\n  const [rows, setRows] = useState<string[][]>([]);\n  const [profile, setProfile] = useState<any | null>(null);\n\n  const sampleCSV = `team,incidents,resolution_hours,category\\nNetwork,42,3,Connectivity\\nSecurity,5,12,Phishing\\nSecurity,1,28,Ransomware\\nHelpdesk,120,1,Password\\nHelpdesk,10,6,Hardware\\nCloud,8,9,Deployment\\n`;\n\n  const handleText = async (text: string) => {\n    try {\n      const res: any = await postWorker({ type: 'csv_parse', text }, 'csv_result');\n      setHeaders(res.headers);\n      setRows(res.rows);\n      setProfile(res.profile);\n    } catch {\n      // Fallback to main thread if worker not available\n      const { headers, rows } = parseCSV(text);\n      setHeaders(headers);\n      setRows(rows);\n      setProfile(profileCSV(headers, rows));\n    }\n  };\n\n  const onFile = async (f: File) => {\n    setFileName(f.name);\n    const text = await f.text();\n    handleText(text);\n  };\n\n  const totalIncidents = useMemo(() => {\n    const idx = headers.findIndex((h) => h.toLowerCase().includes('incident'));\n    if (idx === -1) return null;\n    return rows.reduce((acc, r) => acc + (Number(r[idx]) || 0), 0);\n  }, [headers, rows]);\n\n  return (\n    <div>\n      <div className=\"flex flex-col sm:flex-row items-start gap-2\">\n        <div className=\"flex items-center gap-2\">\n          <label className=\"px-3 py-2 bg-slate-900 border border-slate-700 rounded-lg cursor-pointer text-slate-200 inline-flex items-center\">\n            <Upload size={16} className=\"mr-2\" /> Upload CSV\n            <input type=\"file\" accept=\".csv\" className=\"hidden\" onChange={(e) => {\n              const f = e.target.files?.[0];\n              if (f) onFile(f);\n            }} />\n          </label>\n          <button\n            className=\"px-3 py-2 bg-slate-900 border border-slate-700 rounded-lg text-slate-200\"\n            onClick={() => handleText(sampleCSV)}\n          >\n            Use Sample\n          </button>\n        </div>\n        <div className=\"text-sm text-slate-400\">{fileName || 'No file selected'}</div>\n      </div>\n\n      {profile && (\n        <div className=\"mt-4 space-y-3\">\n          <div className=\"grid sm:grid-cols-3 gap-3\">\n            <div className=\"bg-slate-900 border border-slate-700 rounded-lg p-3 text-slate-200\">\n              <div className=\"text-slate-400 text-sm\">Rows</div>\n              <div className=\"text-xl font-semibold\">{profile.rows}</div>\n            </div>\n            <div className=\"bg-slate-900 border border-slate-700 rounded-lg p-3 text-slate-200\">\n              <div className=\"text-slate-400 text-sm\">Columns</div>\n              <div className=\"text-xl font-semibold\">{profile.columns}</div>\n            </div>\n            <div className=\"bg-slate-900 border border-slate-700 rounded-lg p-3 text-slate-200\">\n              <div className=\"text-slate-400 text-sm\">Total Incidents (if present)</div>\n              <div className=\"text-xl font-semibold\">{totalIncidents ?? '—'}</div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full text-sm\">\n              <thead>\n                <tr>\n                  {headers.map((h) => (\n                    <th key={h} className=\"text-left px-2 py-1 text-slate-300 border-b border-slate-700\">{h}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {rows.slice(0, 50).map((r, i) => (\n                  <tr key={i} className=\"even:bg-slate-900/40\">\n                    {r.map((c, j) => (\n                      <td key={j} className=\"px-2 py-1 text-slate-200 border-b border-slate-800 truncate max-w-[240px]\">{c}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div>\n            <div className=\"text-slate-300 font-medium mb-2\">Column Profiles</div>\n            <div className=\"grid md:grid-cols-2 gap-3\">\n              {profile.summary.map((col: any) => (\n                <div key={col.header} className=\"bg-slate-900 border border-slate-700 rounded-lg p-3\">\n                  <div className=\"text-slate-200 font-semibold\">{col.header}</div>\n                  <div className=\"text-slate-400 text-sm\">Values: {col.count} • Distinct: {col.distinct}</div>\n                  {col.numeric && (\n                    <div className=\"mt-2 text-sm text-slate-300\">\n                      <div>Mean: {col.numeric.mean.toFixed(2)} • Std: {col.numeric.std.toFixed(2)}</div>\n                      {col.numeric.anomalies.length > 0 && (\n                        <div className=\"mt-1\">\n                          <div className=\"text-slate-400\">Anomalies (|z| ≥ 3):</div>\n                          <ul className=\"list-disc list-inside text-slate-300\">\n                            {col.numeric.anomalies.map((a: any, i: number) => (\n                              <li key={i}>Row {a.i + 1}: {a.v} (z={a.z.toFixed(2)})</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AILab: React.FC = () => {\n  const [openSettings, setOpenSettings] = useState(false);\n  const [mode, setMode] = useState<Mode>('local');\n  const [provider, setProvider] = useState<Provider>(getStoredProvider() || 'gemini');\n  const [retrieval, setRetrieval] = useState<RetrievalMode>('tfidf');\n\n  return (\n    <section id=\"ai-lab\" className=\"py-16 container-padding\">\n      <div className=\"mb-6\">\n        <div className=\"inline-flex items-center px-3 py-1 rounded-full bg-primary-600/20 text-primary-300 text-xs font-semibold mb-2\">\n          <Sparkles size={14} className=\"mr-1\"/> AI Lab (Local & Optional API)\n        </div>\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-3\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-white\">Interactive AI Demos</h2>\n            <p className=\"mt-1 text-slate-300 max-w-3xl\">Runs locally by default. You can also use your own API key (stored in this browser) to enhance answers.</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center bg-slate-900 border border-slate-700 rounded-lg overflow-hidden\">\n              <button\n                onClick={() => setMode('local')}\n                className={`px-3 py-2 text-sm ${mode === 'local' ? 'bg-primary-600 text-white' : 'text-slate-300'}`}\n              >Local</button>\n              <button\n                onClick={() => setMode('api')}\n                className={`px-3 py-2 text-sm border-l border-slate-700 ${mode === 'api' ? 'bg-primary-600 text-white' : 'text-slate-300'}`}\n              >API</button>\n            </div>\n            {mode === 'api' && (\n              <select\n                className=\"bg-slate-900 border border-slate-700 rounded-lg px-3 py-2 text-slate-200 text-sm\"\n                value={provider}\n                onChange={(e) => setProvider(e.target.value as Provider)}\n              >\n                <option value=\"gemini\">Gemini</option>\n                <option value=\"groq\">Groq</option>\n                <option value=\"openrouter\">OpenRouter</option>\n              </select>\n            )}\n            <button\n              className=\"inline-flex items-center px-3 py-2 bg-slate-900 border border-slate-700 rounded-lg text-slate-200 text-sm\"\n              onClick={() => setOpenSettings(true)}\n              title=\"API Keys & default provider\"\n            >\n              <SettingsIcon size={16} className=\"mr-1\"/> Settings\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card title=\"Resume Q&A (RAG)\" icon={<Bot size={18}/> }>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <span className=\"text-xs text-slate-400\">Retrieval:</span>\n            <div className=\"flex items-center bg-slate-900 border border-slate-700 rounded-lg overflow-hidden\">\n              <button onClick={() => setRetrieval('tfidf')} className={`px-2 py-1 text-xs ${retrieval === 'tfidf' ? 'bg-primary-600 text-white' : 'text-slate-300'}`}>TF‑IDF</button>\n              <button onClick={() => setRetrieval('semantic')} className={`px-2 py-1 text-xs border-l border-slate-700 ${retrieval === 'semantic' ? 'bg-primary-600 text-white' : 'text-slate-300'}`}>Semantic (beta)</button>\n            </div>\n          </div>\n          <ResumeQA mode={mode} provider={provider} retrieval={retrieval} onMissingKey={() => setOpenSettings(true)} />\n        </Card>\n        <Card title=\"CSV Insights Analyzer\" icon={<Database size={18}/> }>\n          <CSVInsights/>\n        </Card>\n      </div>\n\n      <SettingsModal open={openSettings} onClose={() => setOpenSettings(false)} onSaved={() => {\n        // sync provider from saved default if user updated it\n        const p = getStoredProvider();\n        if (p) setProvider(p);\n      }} />\n    </section>\n  );\n};\n\nexport default AILab;\n"],"file":"assets/AILab-5f84dfee.js"}