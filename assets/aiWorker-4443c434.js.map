{"version":3,"file":"aiWorker-4443c434.js","sources":["../src/workers/aiWorker.ts"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n// Web Worker: TF-IDF retrieval + CSV parsing/profiling\n\nexport type WorkerMsg =\n  | { type: 'tfidf_build'; chunks: string[] }\n  | { type: 'tfidf_topk'; query: string; k?: number; reqId: string }\n  | { type: 'csv_parse'; text: string; reqId: string };\n\nexport type WorkerResp =\n  | { type: 'tfidf_ready' }\n  | { type: 'tfidf_topk_result'; reqId: string; items: { index: number; score: number }[] }\n  | { type: 'csv_result'; reqId: string; headers: string[]; rows: string[][]; profile: any }\n  | { type: 'error'; reqId?: string; message: string };\n\n// ---- TF-IDF internals ----\nlet idf: Map<string, number> | null = null;\nlet docVecs: Map<string, number>[] = [];\n\nfunction tokenize(text: string): string[] {\n  return text.toLowerCase().replace(/[^a-z0-9\\s]/g, ' ').split(/\\s+/).filter(Boolean);\n}\n\nfunction buildTfidf(chunks: string[]) {\n  const docs = chunks.map((c) => tokenize(c));\n  const df = new Map<string, number>();\n  for (const tokens of docs) {\n    const uniq = new Set(tokens);\n    uniq.forEach((t) => df.set(t, (df.get(t) || 0) + 1));\n  }\n  const N = docs.length || 1;\n  idf = new Map<string, number>();\n  df.forEach((d, term) => idf!.set(term, Math.log((N + 1) / (d + 1)) + 1));\n\n  docVecs = docs.map((tokens) => {\n    const tf = new Map<string, number>();\n    for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n    const vec = new Map<string, number>();\n    tf.forEach((count, term) => {\n      const weight = (count / tokens.length) * (idf!.get(term) || 0);\n      vec.set(term, weight);\n    });\n    return vec;\n  });\n}\n\nfunction vectorize(text: string) {\n  const tokens = tokenize(text);\n  const tf = new Map<string, number>();\n  for (const t of tokens) tf.set(t, (tf.get(t) || 0) + 1);\n  const vec = new Map<string, number>();\n  tf.forEach((count, term) => {\n    const weight = (count / tokens.length) * (idf!.get(term) || 0);\n    vec.set(term, weight);\n  });\n  return vec;\n}\n\nfunction cosineSim(a: Map<string, number>, b: Map<string, number>) {\n  let dot = 0;\n  let a2 = 0;\n  let b2 = 0;\n  a.forEach((av, t) => {\n    a2 += av * av;\n    const bv = b.get(t) || 0;\n    dot += av * bv;\n  });\n  b.forEach((bv) => (b2 += bv * bv));\n  const denom = Math.sqrt(a2) * Math.sqrt(b2);\n  return denom ? dot / denom : 0;\n}\n\nfunction tfidfTopK(query: string, k = 4) {\n  if (!idf || !docVecs.length) return [] as { index: number; score: number }[];\n  const q = vectorize(query);\n  const scored = docVecs.map((dv, i) => ({ index: i, score: cosineSim(q, dv) }));\n  scored.sort((a, b) => b.score - a.score);\n  return scored.slice(0, k);\n}\n\n// ---- CSV parsing/profiling ----\nfunction parseCSV(text: string): { headers: string[]; rows: string[][] } {\n  const lines = text.replace(/\\r\\n?/g, '\\n').split('\\n').filter((l) => l.trim().length > 0);\n  const rows: string[][] = [];\n  for (const line of lines) {\n    const cells: string[] = [];\n    let cur = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const ch = line[i];\n      if (ch === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          cur += '\"';\n          i++;\n        } else {\n          inQuotes = !inQuotes;\n        }\n      } else if (ch === ',' && !inQuotes) {\n        cells.push(cur);\n        cur = '';\n      } else {\n        cur += ch;\n      }\n    }\n    cells.push(cur);\n    rows.push(cells);\n  }\n  const headers = rows.shift() || [];\n  return { headers, rows };\n}\n\nfunction profileCSV(headers: string[], rows: string[][]) {\n  const n = rows.length;\n  const summary = headers.map((h, col) => {\n    const values = rows.map((r) => r[col]).filter((v) => v !== undefined);\n    const nums = values.map((v) => Number(v)).filter((x) => !Number.isNaN(x));\n    const isNumeric = nums.length >= Math.max(3, Math.floor(values.length * 0.6));\n    const distinct = new Set(values).size;\n    const basic: any = { header: h, count: values.length, distinct };\n    if (isNumeric) {\n      const mean = nums.reduce((a, b) => a + b, 0) / (nums.length || 1);\n      const std = Math.sqrt(nums.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / (nums.length || 1));\n      const anomalies = nums\n        .map((v, i) => ({ v, i, z: std ? Math.abs((v - mean) / std) : 0 }))\n        .filter((o) => o.z >= 3)\n        .slice(0, 10);\n      basic.numeric = { mean, std, anomalies };\n    }\n    return basic;\n  });\n  return { rows: n, columns: headers.length, summary };\n}\n\nself.addEventListener('message', (e: MessageEvent<WorkerMsg>) => {\n  const msg = e.data;\n  try {\n    if (msg.type === 'tfidf_build') {\n      buildTfidf(msg.chunks);\n      (self as any).postMessage({ type: 'tfidf_ready' } as WorkerResp);\n      return;\n    }\n    if (msg.type === 'tfidf_topk') {\n      const items = tfidfTopK(msg.query, msg.k ?? 4);\n      (self as any).postMessage({ type: 'tfidf_topk_result', reqId: msg.reqId, items } as WorkerResp);\n      return;\n    }\n    if (msg.type === 'csv_parse') {\n      const { headers, rows } = parseCSV(msg.text);\n      const profile = profileCSV(headers, rows);\n      (self as any).postMessage({ type: 'csv_result', reqId: msg.reqId, headers, rows, profile } as WorkerResp);\n      return;\n    }\n  } catch (err: any) {\n    (self as any).postMessage({ type: 'error', reqId: (msg as any).reqId, message: err?.message || String(err) } as WorkerResp);\n  }\n});\n"],"names":["idf","docVecs","tokenize","text","buildTfidf","chunks","docs","c","df","tokens","t","N","d","term","tf","vec","count","weight","vectorize","cosineSim","a","b","dot","a2","b2","av","bv","denom","tfidfTopK","query","k","q","scored","dv","i","parseCSV","lines","l","rows","line","cells","cur","inQuotes","ch","profileCSV","headers","n","summary","h","col","values","r","v","nums","x","isNumeric","distinct","basic","mean","std","anomalies","o","e","msg","items","profile","err"],"mappings":"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"}